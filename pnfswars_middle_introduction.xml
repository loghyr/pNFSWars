<!-- Copyright (C) The IETF Trust (2014) -->
<!-- Copyright (C) The Internet Society (2014) -->

<section anchor="sec:intro" title="Introduction">

  <t>
    The concept of layout type has a central role in the definition
    and implementation of Parallel Network File System (pNFS).
    Clients and servers implementing different layout types behave
    differently in many ways while conforming to the overall pNFS
    framework defined in <xref target='RFC5661' /> and this document.
    Layout types may differ in:

    <list style='symbols'>
      <t>
        The method used to do I/O operations directed to data storage devices.
      </t>

      <t>
        The requirements for communication between the metadata server
        (MDS) and the storage devices.
      </t>

      <t>
        The means used to ensure that I/O requests
        are only processed when the client holds an appropriate layout.
      </t>

      <t>
        The format and interpretation of nominally opaque data fields in
        pNFS-related NFSv4.x data structures.
      </t>
    </list>
  </t>

  <t>
    Such matters are defined in a standards-track layout type
    specification.  Except for the files layout type, which was
    defined in Section 13 of <xref target='RFC5661' />, existing
    layout types are defined in their own standards-track documents
    and it is anticipated that new layout type will be defined in
    similar documents.
  </t>

  <t>
    The file layout type
    was defined in the Network File System (NFS) version 4.1
    protocol specification <xref target='RFC5661' />. The block
    layout type was defined in <xref target='RFC5663' /> and the object
    layout type was in turn defined in <xref target='RFC5664' />.
  </t>

  <t>
    Some implementers have interpreted the text in Sections 12
    ("Parallel NFS (pNFS)") and 13 ("NFSv4.1 as a Storage Protocol
    in pNFS: the File Layout Type") of <xref target='RFC5661' />
    as both being applying only to the file layout type. Because Section
    13 was not covered in a separate standards-track document like
    those for both the block and object layout types, there had
    been some confusion as to the responsibilities of both the
    metadata server and the data servers (DS) which were laid out
    in Section 12.
  </t>

  <t>
    As a consequence, new internet drafts (see <xref target='FlexFiles' />
    and <xref target='Lustre' />) may struggle to meet the requirements
    to be a pNFS layout type. This document specifies the
    layout type independent requirements placed on all layout types,
    whether one of the original three or any new variant.
  </t>
</section>

<section anchor='sec:defs' title='Definitions'>
  <t>
    <list style='hanging'>
      <t hangText='control communication requirements:'>
        define for a layout type the details regarding
        information on layouts, stateids, file metadata, and file
        data which must be  communicated between the metadata
        server and the storage devices.
      </t>

      <t hangText='control protocol:'>
        defines a particular mechanism that an implementation of a
        layout type would use to meet the control communication
        requirement for that layout type.  This need not be a
        protocol as normally understood.  In some cases the same
        protocol my be used as a control protocol and data access
        protocol.
      </t>

      <t hangText='(file) data:'>
        is that part of the file system object which contains
        the data to read or writen. It is the contents of the object
        and not the attributes of the object.
      </t>

      <t hangText='data server (DS):'>
        is a pNFS server which provides the file's data when the file
        system object is accessed over a file-based protocol.  Note
        that this usage differs from that in
        <xref target='RFC5661' /> which applies
        the term in some cases even when other sorts of protocols
        are being used. Depending on the layout, there might be one
        or more data servers over which the data is striped.
        While the metadata server is strictly accessed over
        the NFSv4.1 protocol, depending on the layout type, the
        data server could be accessed via any file access protocol
        that meets the pNFS requirements.
        <vspace blankLines='1' />
        See <xref target='sec:intro:diff' /> for a comparison of this
        term and "data storage device".
      </t>

      <t hangText='fencing:'>
        is the process by which  the metadata server prevents the storage
        devices from processing I/O from a specific client to a specific
        file.
      </t>

      <t hangText='layout:'>
        contains information a client uses to access file data on a
        storage device. This information will include specification
        of the protocol (layout type) and the identity of the storage
        devices to be used.
        <vspace blankLines='1' />
        The bulk of the contents of the layout are defined in <xref
        target='RFC5661' />  as nominally opaque, but individual layout
        types may specify their own interpretation of layout data.
      </t>

      <t hangText='layout iomode:'>
        see <xref target='sec:intro' />.
      </t>

      <t hangText='layout stateid:'>
        is a 128-bit quantity returned by a server that
        uniquely defines the layout state provided by the server
        for a specific layout that describes a layout type and
        file (see Section 12.5.2 of <xref target='RFC5661' />).
        Further, Section 12.5.3 describes differences in handling
        between layout stateids and other stateid types.
      </t>

      <t hangText='layout type:'>
        describes both the storage protocol used to
        access the data and the aggregation scheme used to lay out
        the file data on the underlying storage devices.
      </t>

      <t hangText='(file) metadata:'>
        is that part of the file system object that contains various
        descriptive data relevant to the file object, as opposed to
        the file data itself.  This could include the time of last
        modification, access time, eof position, etc.
      </t>

      <t hangText='metadata server (MDS):'>
        is the pNFS server which provides metadata information for a file
        system object. It also is responsible for generating, recalling,
        and revoking layouts for file system objects, for performing
        directory operations, and for performing I/O operations to
        regular files when the clients direct these to the metadata
        server itself.
      </t>

      <t hangText='recalling a layout:'>

        occurs when the metadata server issues a callbck to inform
        the client that the layout is to be returned in a graceful
        manner. Note that the client could be able to flush any writes,
        etc., before replying to the metadata server.

      </t>

      <t hangText='revoking a layout:'>
        occurs when the metadata server invalidates a specific layout
        Once revocation occurs, the metadata server will not accept as
        valid any reference to the revoked layout and a storage
        device will not accept any client access based on the layout.
      </t>

      <t hangText='stateid:'>
        is a 128-bit quantity returned by a server that uniquely defines
        the set of locking-related state provided by the server.
        Stateids may designate state related to open files, to byte-range
        locks, to delegations, or to layouts.
      </t>

      <t hangText='storage device:'>
        designates the target to which clients may direct I/O requests
        when they hold an appropriate layout.  Note that each data server
        is a storage device but that some storage device are not data servers.
        See <xref target='sec:intro:diff' /> for further discussion.
      </t>

      <t hangText='storage protocol:'>
        is the protocol used by clients to do I/O operations to the
        storage device,  Each layout type may specify its own storage
        protocol.  It is possible for a layout type to specify
        multiple access protocols.
      </t>
    </list>
  </t>

  <section anchor='sec:intro:diff' title='Use of the Terms "Data Server" and "Storage Device"'>
    <t>
      In <xref target='RFC5661' />, these the two terms of "Data Server"
      and "Storage Device" are used somewhat inconsistently:
    </t>

    <t>
      <list style='symbols'>
        <t>
          In chapter 12, where pNFS in general is discussed, the term
          "storage device" is used.
        </t>

        <t>
          In chapter 13, where the file layout type is discussed, the term
          "data server" is used.
        </t>

        <t>
          In other chapters, the term "data server" is used, even in
          contexts where the storage access type is not NFSv4.1 or any
          other file access protocol.
        </t>
      </list>
    </t>

    <t>
      As this document deals with pNFS in general, it uses the more
      generic term "storage device" in preference to "data server".
      The term "data server" is used only in contexts in which a file
      server is used as a storage device.  Note that every data
      server is a storage device but that storage devices which use
      protocols which are not file access protocol are not data servers.
    </t>

    <t>
      Since a given storage device may support multiple layout types,
      a given device can potentially act as a data server for some set of
      storage protocols while simultaneously acting as a non-data-server
      storage device for others.
    </t>
  </section>

  <section title="Requirements Language">
    <t>
      The key words &quot;MUST&quot;, &quot;MUST NOT&quot;,
      &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
      &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,
      &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be
      interpreted as described in <xref target="RFC2119" />.
    </t>
  </section>
</section>
