<!-- Copyright (C) The IETF Trust (2014) -->
<!-- Copyright (C) The Internet Society (2014) -->

<section anchor="sec:control" title="The Control Protocol">
  <t>

    In Section 12.2.6 of <xref target='RFC5661' />, the concept of
    a control protocol was introduced.  There have been no
    specifications for control protocols published so far.  The control protocol
    denotes any mechanism used to meet the requirements that apply to
    the interaction between the metadata server and the storage device
    such that they present a consistent interface to the client.
    Particular implementations may satisfy this requirement in any
    manner they choose and the mechanism chosen may not be described as
    a protocol.  Specifications defining layout types need to clearly
    show how implementations can meet the requirements discussed below,
    especially with respect to those that have security implications.
    In addition, such specifications may find it necessary to impose
    requirements on implementations of the layout type to ensure
    appropriate interoperability.

  </t>

  <t>
    In some cases, there may be no control protocol other than the storage
    protocol.  This is often described as using a "loose coupling" model.
    In such cases, the assumption is that the metadata server,
    storage devices, and client may be changed independently and that
    the implementation requirements in the layout type specification
    need to ensure this degree of interoperability.  This model is used
    in the block and object layout type specification.
  </t>

  <t>
    In other cases, it is assumed that there will be a  purpose-built control
    protocol which may be different for different implementations of the
    metadata server and data server.  In such cases, the assumption is
    that the metadata server and data servers are designed and implemented
    as a unit and interoperability needs to be assured between clients
    and metadata-data server pairs, developed independently. This is
    the model used for the files layout.
  </t>

  <t>
    Another possibility, not so far realized, is for the definition of
    a control protocol to be specified in a standards-track document.
    There are two subcases to consider:

    <list style='symbols'>
      <t>
        A new layout type includes a definition of a particular
        control protocol whose use is obligatory for metadata serverss
        and storage devices implementing the layout type.  In this case
        the interoperability model is similar to the first case above
        and the defining document should assure interoperability among
        metadata servers, storage devices, and clients developed
        independently.
      </t>

      <t>
        A control protocol is defined in a standards-track document
        which meets the control protocol requirements for one of the
        existing layout types.  In this case, the new document's job
        is to assure interoperability between metadata servers and
        storage devices developed separately.  The existing  definition
        document for the selected layout type retains the function of
        assuring interoperability between clients and a given collection
        of metadata servers and storage devices.  In this context,
        implementations that implement the new protocol are treated in
        the same way as those that use an internal control protocol or
        a functional equivalent.
      </t>
    </list>
  </t>

  <section anchor="sec:control:req" title="Control Protocol REQUIREMENTS">
    <t>
      The REQUIREMENTS of interactions between the metadata
      server and the storage devices are:

      <list style='format (%d)'>
        <t>
          The metadata server MUST be able to service the client's
          I/O requests if the client decides to make such requests
          to the metadata server instead of to the storage device.
          The metadata server must be able to retrieve the data
          from the constituent storage devices and present it back
          to the client.  A corollary to this is that even though
          the metadata server has successfully given the client
          a layout, the client MAY still send I/O requests to the
          metadata server.
          <vspace blankLines="1" />
          Whether the metadata server allows access over other protocols
          (e.g., NFSv3, Server Message Block (SMB), etc) is strictly an
          implementation choice, just as it is in the case of any other
          (i.e., non-pNFS-supporting) NFSv4.1 server.
        </t>

        <t>
          The metadata server MUST be able to restrict access to a file
          on the storage devices when it revokes a layout. The metadata
          server typically would revoke a layout whenever a client fails
          to respond to a recall or a client's lease is expired due to
          non-renewal. It might also revoke the layout as a means of
          enforcing a change in locking state or access permissions that
          the storage device cannot directly enforce.
          <vspace blankLines="1" />
          Effective revocation may require client co-operation in using a
          particular stateid (files layout) or principal (e,g., flexible
          files layout) when performing I/O.
        </t>

        <t>
          A pNFS impelementation MUST NOT allow the violation of NFSv4.1's
          access controls: ACLs and file open modes.  Section 12.9 of
          <xref target='RFC5661' /> specifically lays this burden on
          the combination of clients, storage devices, and the metadata
          server.  However the specification of the individual layout type
          might create requirements as to how this is to be done. This
          may include a possible requirement for the metadata server to
          update the storage device so that it can enforce security.
          <vspace blankLines="1" />
          The file layout requires the storage device to enforce
          access whereas the flex file layout requires both the
          storage device and the client to enforce security.

        </t>

        <t>
          Interactions between locking and I/O operations MUST obey
          existing semantic restrictions.  In particular, if an I/O
          operation would be invalid when directed at the metadata server,
          it is not to be allowed when performed on the storage device.
        </t>

        <t>
          Any disagreement between the metadata server and the storage
          devices as to the value of attributes such as modify time,
          the change attribute, and the end-of-file (EOF) position MUST
          be of limited duration with clear means of resolution of any
          discrepancies being provided.  Note that

          <list style='format (%c)'>
            <t>
              Discrepancies need not be resolved unless any client has
              accessed the file in question via the metadata server,
              typically by performing a GETATTR.
            </t>

            <t>
              A particular storage device might be striped such it has
              no information regarding the EOF position.
            </t>

            <t>
              Both clock skew and network delay can lead to the metadata
              server and the storage device having different values of
              the time attributes.  As long as those differences can be
              accounted for in what is presented to the client in a GETATTR,
              then no violation results.
            </t>

            <t>
              A LAYOUTCOMMIT requires that changes in attributes resulting
              from operations on the storage device need to be reflected
              in the metadata server by the completion of the operation.
            </t>
          </list>
        </t>
      </list>
    </t>

    <t>
      These requirements may be satisfied in different ways by different
      layout types. As an example, while the file layout type uses
      the stateid to fence off the client, there is no requirement that
      other layout types use this stateid approach.
    </t>

    <t>
      Each new standards-track document for a layout types MUST
      address how the client, metadata server, and storage devices
      are to interact to meet these requirements.
    </t>
  </section>

  <section anchor="sec:control:nonreq" title="Previously Undocumented Protocol REQUIREMENTS">
    <t>
      While not explicitly stated as requirements in 
      Section 12 of <xref target='RFC5661' />, the existing
      layout types do have more requirements that they need
      to enforce.
    </t>

    <t>
      The client has these obligations when making I/O requests to
      the storage devices:

      <list style='format (%d)'>
        <t>
          Clients MUST NOT perform I/O to the storage device if they
          do not have layouts for the files in question.
        </t>

        <t>
          Clients MUST NOT perform I/O operations outside of the
          specified ranges in the layout segment.
        </t>

        <t>
          Clients MUST NOT perform I/O operations which would be
          inconsistent with the iomode specified in the layout segments
          it holds.
        </t>
      </list>
    </t>

    <t>
      Under the file layout type, the storage devices are able to
      reject any request made not conforming to these requirements.
      This may not be possible for other known layout types, which
      puts the burden of enforcing such violations solely on the client.
      For these layout types:

      <list style='format (%d)'>
        <t>
          The metadata server MIGHT use fencing operations to the
          storage devices to enforce layout revocation against the client.
        </t>

        <t>
          The metadata server MUST allow the clients to perform data
          I/O against it, even if it has already granted the client
          a layout.  A layout type might discourage such I/O, but it
          can not forbid it.
        </t>

        <t>
          The metadata server MUST be able to do storage allocation,
          whether that is to create, delete, extend, or truncate files.
        </t>
      </list>
    </t>

    <t>
      The means to address these requirements will vary with the layout
      type.  A control protocol will be used to effect these,
      whether a purpose-built one, one identical to the storage protocol,
      or a new standards-track control protocol.
    </t>
  </section>

  <section anchor="sec:control:edits" title="Editorial Requirements">
    <t>
      This section discusses how the protocol requirements discussed above
      need to be addressed in documents specifying a new layout type.
      Depending on the interoperability model for the layout type in
      question, this may involve the imposition of layout-type-specific
      requirements that ensure appropriate interoperability of pNFS
      components which are developed separately.
    </t>

    <t>
      The specification of the layout type needs to make clear how the
      client, metadata server, and storage device act together to meet
      the protocol requirements discussed previously.  If the document
      does not impose implementation requirements sufficient to ensure
      that these semantic requirements are met, it is not appropriate
      for the working group to allow the document to move forward.
    </t>

    <t>
      Some examples include:

      <list style='symbols'>
        <t>
          If the metadata server does not have a means to invalidate
          a stateid issued to the storage device to keep a particular
          client from accessing a specific file, then the layout type
          spefication has to document how the metadata server is going to
          fence the client from access to the file on that storage device.
        </t>

        <t>
          If the metadata server implements mandatory byte-range locking
          when accessed directly by the client, it must do so when data
          is read or written using the designated storage protocol.
        </t>
      </list>
    </t>
  </section>
</section>
